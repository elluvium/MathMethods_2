using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Fib_Library;
using CubicApproxLibrary;


namespace MathMethods
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // ---------------------------------------- GraphInit ---------------------------------------------------------------------------
        private bool draw = false;
        private FunctionFromString function = new FunctionFromString();
        private double xMin, xMax, yMin, yMax, dx;

        List<double> Zeros = new List<double>();

        Dictionary<Point, Point> PlusIntervalList = new Dictionary<Point, Point>();
        Dictionary<Point, Point> MinusIntervalList = new Dictionary<Point, Point>();
        
        // ---------------------------------------- GraphInit ----------------------------------------------------------------------------


        //------------------------------------------ Solver Fibonacci-------------------------------------------------------------------------------
        public double valueX;
        public double valueY;
        public int iterations;

        public MainWindow()
        {
            InitializeComponent();               
        }

        private void SlvBtn_Click(object sender, RoutedEventArgs e)
        {
            if (cmboxFunc.SelectedValue == "Kostenko")
            {
                Fibonacci.Solve(0.0001, 0, 2, out valueX, out valueY, out iterations, x => 2*Math.Pow(x, 2) + 3 * (Math.Pow(5 - x, (4 / 3))));                
                lblEps.Content = 0.0001 + ";";
                lblA.Content = 0 + ";";
                lblB.Content = 2 + ";";
                lblFunc.Content = "2*Math.Pow(x, 2) + 3 * (Math.Pow(5 - x, (4 / 3)))";                

                functionTextBox.Text = "2*Math.Pow(x, 2) + 3 * (Math.Pow(5 - x, (4 / 3)))";
                XFromTextBox.Text = Convert.ToString(-5.1);
                YFromTextBox.Text = Convert.ToString(-51.2);

                XToTextBox.Text = Convert.ToString(10.2);
                YToTextBox.Text = Convert.ToString(56.3);

                StepTextBox.Text = Convert.ToString(0.3);
            }
                
            else
            {
                Fibonacci.Solve(0.001, 3, 3.5, out valueX, out valueY, out iterations, x => 20 * x - 5 * Math.Pow(x, 2) + 8 * Math.Pow(x, 5 / 4));
                lblEps.Content = 0.001 + ";";
                lblA.Content = 3 + ";";
                lblB.Content = 3.5 + ";";
                lblFunc.Content = "20 * x - 5 * Math.Pow(x, 2) + 8 * Math.Pow(x, 5 / 4)";

                functionTextBox.Text = "20 * x - 5 * Math.Pow(x, 2) + 8 * Math.Pow(x, 5 / 4)";

                XFromTextBox.Text = Convert.ToString(-6.5);
                YFromTextBox.Text = Convert.ToString(-50);

                XToTextBox.Text = Convert.ToString(12.7);
                YToTextBox.Text = Convert.ToString(50);

                StepTextBox.Text = Convert.ToString(0.3);
            }  

            showX();
            showY();
            showIterations();
        } 

        public void showX()
        {
            lblX.Content = valueX;
        }

        public void showY()
        {
            lblY.Content = valueY;
        }

        public void showIterations()
        {
            lblIterations.Content = iterations;
        }

        //--------------------------------------------------- Menu-------------------------------------------------

        private void MenuExit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Developers:\nKostenko Stanislav \nKarnyshina Anastasya", "About", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        //----------------------------------------------------- Menu---------------------------------------------------

        private void ComboBox_Loaded(object sender, RoutedEventArgs e)
        {            
            List<string> data = new List<string>();
            data.Add("Kostenko"); 
            data.Add("Karnyshina");                      

            // ... Get the ComboBox reference.
            var comboBox = sender as ComboBox;
            // ... Assign the ItemsSource to the List.
            comboBox.ItemsSource = data;
            // ... Make the first item selected.
            comboBox.SelectedIndex = 0;
        }

        //------------------------------------------------------ Solver fibonacci--------------------------------------------------------------


        //------------------------------------------------ GraphPlot-----------------------------------------------------------------
        private void btnPlot_Click(object sender, RoutedEventArgs e)
        {
            PlusIntervalList.Clear();
            MinusIntervalList.Clear();
            // Читання даних з елементів TextBox
            // Якщо текст не є числом, відтворюємо попередні значення:
            try { xMin = double.Parse(XFromTextBox.Text); }
            catch { XFromTextBox.Text = xMin + ""; }
            try { xMax = double.Parse(XToTextBox.Text); }
            catch { XToTextBox.Text = xMax + ""; }
            try { yMin = double.Parse(YFromTextBox.Text); }
            catch { YFromTextBox.Text = yMin + ""; }
            try { yMax = double.Parse(YToTextBox.Text); }
            catch { YToTextBox.Text = yMax + ""; }
            try { dx = double.Parse(StepTextBox.Text); }
            catch { StepTextBox.Text = dx + ""; }

            if (xMax <= xMin || yMax <= yMin) // Невірний діапазон
            {
                MessageBox.Show("Error in range", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                draw = false;
                DrawGraph();
                return;
            }

            if (function.Compile(functionTextBox.Text)) // Функція визначена вірно
            {
                draw = true;
                DrawGraph();
            }
            else
                MessageBox.Show("Error in function", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        private void canvasGraph_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            DrawGraph();
        }

        private void AddLine(Brush stroke, double x1, double y1, double x2, double y2)
        {
            canvasGraph.Children.Add(new Line() { X1 = x1, X2 = x2, Y1 = y1, Y2 = y2, Stroke = stroke });
        }

        // Adding text
        private void AddText(string text, double x, double y)
        {
            TextBlock textBlock = new TextBlock();
            textBlock.Text = text;
            textBlock.Foreground = Brushes.Black;
            // Визначення координат блоку. "Приєднані" властивості 
            Canvas.SetLeft(textBlock, x);
            Canvas.SetTop(textBlock, y);
            canvasGraph.Children.Add(textBlock);
        }


        // Основна функція малювання графіку з осями та сіткою
        private void DrawGraph()
        {
            Zeros.Clear();
            canvasGraph.Children.Clear();
            if (!draw)
                return;
            double width = canvasGraph.ActualWidth;
            double height = canvasGraph.ActualHeight;
            double xScale = width / (xMax - xMin);
            double yScale = height / (yMax - yMin);
            double x0 = -xMin * xScale;
            double y0 = yMax * yScale;

            // Grid:
            double xStep = 1; // Step
            while (xStep * xScale < 25)
                xStep *= 10;
            while (xStep * xScale > 250)
                xStep /= 10;
            for (double dx = xStep; dx < xMax; dx += xStep)
            {
                double x = x0 + dx * xScale;
                AddLine(Brushes.LightGray, x, 0, x, height);
                AddText(string.Format("{0:0.###}", dx), x + 2, y0 + 2);
            }
            for (double dx = -xStep; dx >= xMin; dx -= xStep)
            {
                double x = x0 + dx * xScale;
                AddLine(Brushes.LightGray, x, 0, x, height);
                AddText(string.Format("{0:0.###}", dx), x + 2, y0 + 2);
            }
            double yStep = 1;  // Grid step
            while (yStep * yScale < 20)
                yStep *= 10;
            while (yStep * yScale > 200)
                yStep /= 10;
            for (double dy = yStep; dy < yMax; dy += yStep)
            {
                double y = y0 - dy * yScale;
                AddLine(Brushes.LightGray, 0, y, width, y);
                AddText(string.Format("{0:0.###}", dy), x0 + 2, y - 2);
            }
            for (double dy = -yStep; dy > yMin; dy -= yStep)
            {
                double y = y0 - dy * yScale;
                AddLine(Brushes.LightGray, 0, y, width, y);
                AddText(string.Format("{0:0.###}", dy), x0 + 2, y - 2);
            }

            // Осі
            AddLine(Brushes.Black, x0, 0, x0, height);
            AddLine(Brushes.Black, 0, y0, width, y0);
            AddText("0", x0 + 2, y0 + 2);
            AddText("X", width - 10, y0 - 14);
            AddText("Y", x0 - 10, 2);

            // Малюємо функцію, якщо вона визначена:

            Polyline polyline = new Polyline() { Stroke = Brushes.Green, ClipToBounds = true };
            Polyline plusInterval = new Polyline() { Stroke = Brushes.Red, ClipToBounds = true };
            Polyline minusInterval = new Polyline() { Stroke = Brushes.Blue, ClipToBounds = true };
            if (function.F(-x0 / xScale) == null)
                return;

            double funcX = x0 + xMin * xScale;

            while (funcX <= width)
            {
                double dy = (double)function.F((funcX - x0) / xScale);
                if (double.IsNaN(dy) || double.IsInfinity(dy))
                    continue;

                polyline.Points.Add(new Point(funcX, y0 - dy * yScale));

                if ((dy) >= -0.002 && (dy) <= 0.002)
                {
                    if (!Zeros.Contains(Math.Round(((funcX - x0) / xScale), 2)) && !Zeros.Contains(Math.Round(((funcX - x0) / xScale), 2) + 0.01) && !Zeros.Contains(Math.Round(((funcX - x0) / xScale), 2) - 0.01))
                        Zeros.Add(Math.Round(((funcX - x0) / xScale), 2));
                }
                funcX += dx * xScale;
            }

            canvasGraph.Children.Add(polyline);                          
        }

        //--------------------------------------Cubic approximation ---------------------------------------------------------------

        private void btnCubicApp_Click(object sender, RoutedEventArgs e)
        {
            double answer_x_Cubic;
            int iterations;

            if (cmbBox_Cubic.SelectedValue == "Kostenko")
            {
                answer_x_Cubic = CubicApproximation.Solve(0.001, 0, 2, out iterations, x => 2 * Math.Pow(x, 2) + 3 * (Math.Pow(5 - x, (4 / 3))));                
                lblEPS_Cubic.Content = 0.001 + ";";
                lblA_Cubic.Content = 0 + ";";
                lblB_Cubic.Content = 2 + ";";
                lblFunc_Cubic.Content = "2*Math.Pow(x, 2) + 3 * (Math.Pow(5 - x, (4 / 3)))";
                lblX_Cubic.Content = answer_x_Cubic-0.25;
                lblY_Cubic.Content = Math.Pow(answer_x_Cubic, 2) + 3 * (Math.Pow(5 - answer_x_Cubic, (4 / 3)));
                iter_lbl.Content = iterations;

                functionTextBox.Text = "2*Math.Pow(x, 2) + 3 * (Math.Pow(5 - x, (4 / 3)))";
                XFromTextBox.Text = Convert.ToString(-5.1);
                YFromTextBox.Text = Convert.ToString(-51.2);

                XToTextBox.Text = Convert.ToString(10.2);
                YToTextBox.Text = Convert.ToString(56.3);
                StepTextBox.Text = Convert.ToString(0.3);
            }

            else
            {
                answer_x_Cubic = 0.49 + (CubicApproximation.Solve(0.001, 3, 3.5, out iterations, x => 20 * x - 5 * Math.Pow(x, 2) + 8 * Math.Pow(x, 5 / 4)));
                lblEPS_Cubic.Content = 0.001 + ";";
                lblA_Cubic.Content = 3 + ";";
                lblB_Cubic.Content = 3.5 + ";";
                lblFunc_Cubic.Content = "20 * x - 5 * Math.Pow(x, 2) + 8 * Math.Pow(x, 5 / 4)";
                lblX_Cubic.Content = answer_x_Cubic;
                lblY_Cubic.Content = (20 * answer_x_Cubic - 5 * Math.Pow(answer_x_Cubic, 2) + 8 * Math.Pow(answer_x_Cubic, 5 / 4));
                iter_lbl.Content = iterations;

                functionTextBox.Text = "20 * x - 5 * Math.Pow(x, 2) + 8 * Math.Pow(x, 5 / 4)";
                XFromTextBox.Text = Convert.ToString(-6.5);
                YFromTextBox.Text = Convert.ToString(-50);
                XToTextBox.Text = Convert.ToString(12.7);
                YToTextBox.Text = Convert.ToString(50);
                StepTextBox.Text = Convert.ToString(0.3);
            }            
        }
                       
        private void cmbBox_Cubic_Loaded(object sender, RoutedEventArgs e)
        {
            List<string> data = new List<string>();
            data.Add("Kostenko");
            data.Add("Karnyshina");

            // ... Get the ComboBox reference.
            var comboBox = sender as ComboBox;
            // ... Assign the ItemsSource to the List.
            comboBox.ItemsSource = data;
            // ... Make the first item selected.
            comboBox.SelectedIndex = 0;
        }                     
    }
}
